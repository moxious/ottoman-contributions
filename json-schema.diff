diff --git a/lib/modelinstance.js b/lib/modelinstance.js
index c527922..c11fd15 100644
--- a/lib/modelinstance.js
+++ b/lib/modelinstance.js
@@ -293,6 +293,79 @@ ModelInstance.prototype.toJSON = function() {
 };
 
 /**
+ * Returns a JSON-schema version of this model instance.
+ * 
+ * This schema will use a strict subset of the JSON schema 
+ * draft 4 specification, found at 
+ * http://json-schema.org/documentation.html
+ * 
+ * This JSON schema instance is suitable for integration with 
+ * external validators, generators, and other tools such as 
+ * swagger.  
+ * 
+ * @returns {Object}
+ */
+ModelInstance.prototype.toJSONSchema = function () {    
+    // Controls how Ottoman types map to JSON-schema types.
+    var typeMappings = {
+        integer: { type: 'integer' },
+        number: { type: 'number' },
+        boolean: { type: 'boolean' },
+        string: { type: 'string' },
+        Date: { type: 'Date' },
+        
+        // JSON schema short hand for any type.
+        Mixed: {}
+    };
+    
+    var getJSONSchemaType = function (type) { 
+        if(type in typeMappings) { 
+            return typeMappings[type];
+        } else {
+            throw new Error('Unknown Ottoman type ' + type);
+        }
+    };
+    
+    var jsonSchemaizeField = function (field) {
+        // It's a primitive (string, boolean)
+        if(field.type.type) {
+            return getJSONSchemaType(field.type.type);
+        }
+        
+        // It's a nested document.
+        var props = { 
+            type: 'object',
+            properties: {} 
+        };
+        
+        field.type.fields.forEach(function (subField) {
+            props.properties[subField.name] = 
+                jsonSchemaizeField(subField);    
+        });
+        
+        return props;
+    };
+    
+    var schema = {
+        title: 'Ottoman Model ' + this.name,
+        id: '/' + this.name,
+        type: 'object',
+        
+        // JSON schema calls them properties, not fields.
+        properties: {
+            // To be filled in by code below.
+        }
+    };
+    
+    this.$.schema.fields.forEach(function (field) {
+        if(field.name === '_id') { return; } 
+        schema.properties[field.name] = jsonSchemaizeField(field);    
+    });
+    
+    return schema;
+};
+
+/**
  * A custom inspector to help with debugging of model instances.
  *
  * @private
diff --git a/package.json b/package.json
index c12edcd..723abb1 100644
--- a/package.json
+++ b/package.json
@@ -25,6 +25,7 @@
     "istanbul": "~0.3.21",
     "mocha": "~2.3.3",
     "jsdoc": "~3.3.0-alpha9",
+    "jsonschema": "^1.1.0",
     "ink-docstrap": "git+https://github.com/brett19/docstrap.git#master",
     "jshint": "~2.6.3"
   },
diff --git a/test/basic.test.js b/test/basic.test.js
index 6e6780c..8c06528 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -613,3 +613,92 @@ describe('Models', function() {
   });
 
 });
+
+describe("Schemas", function() {
+    var modelId = H.uniqueId('model');
+    var TestMdl = ottoman.model(modelId, {
+        num: 'integer',
+        str: 'string',
+        b: 'boolean',
+        mixed: 'Mixed',
+        aDate: 'Date',
+        someDoc: {
+            prop1: 'string',
+            prop2: 'number',
+            prop3: 'boolean'
+        }
+    });
+    
+    var validExample = {
+        num: 3,
+        str: 'Hello, World!',
+        b: false,
+        mixed: { a: "Foo", b: "Bar" },
+        aDate: new Date(),
+        someDoc: {
+            prop1: 'hi',
+            prop2: 3.141592,
+            prop3: true
+        }
+    };
+    
+    // Committing 4 errors here on purpose.
+    var invalid_CompleteButBadType = {
+        num: 3,
+        str: 'Hello, World!',
+        // Error 1
+        b: 'I am not supposed to be a string!',
+        mixed: { a: "Foo", b: "Bar" },
+        // Error 2
+        aDate: 'Supposed to be a date',
+        someDoc: {
+            prop1: 0,
+            // Error 3
+            prop2: false,
+            // Error 4
+            prop3: 'Totally invalid',
+        }        
+    };
+    
+    var validModel = new TestMdl(validExample);
+    var invalidModel = new TestMdl(invalid_CompleteButBadType);
+
+    /*
+     * Test basic schema generation and plausibility, require
+     * that certain generated minimums are present.
+     */
+    it('should generate a schema', function() {
+        var schema = validModel.toJSONSchema();
+        assert.instanceOf(schema, Object);
+        assert.isDefined(schema.title);
+        assert.isDefined(schema.type);
+        assert.isDefined(schema.properties);
+    });
+    
+    /*
+     * Verify that the generated schema is good enough to validate
+     * the model instance JSON, otherwise the schema isn't an 
+     * accurate representation.
+     */
+    it('schema should validate model instance', function () {
+        var validate = require('jsonschema').validate;
+        var vResult = validate(validModel.toJSON(), 
+                               validModel.toJSONSchema());
+        assert.equal(vResult.errors.length, 0);    
+    });
+
+    /*
+     * By using a validator and checking that the expected outputs
+     * are there, we test that the schema is syntactically vaild
+     * enough to do useful stuff with other tools.
+     */    
+    it('should generate validatable schemas', function () {
+        var schema = validModel.toJSONSchema();
+        var validate = require('jsonschema').validate;
+        var goodResult = validate(validModel.toJSON(), schema);
+        var badResult = validate(invalidModel.toJSON(), schema);
+        
+        assert.equal(goodResult.errors.length, 0);
+        assert.equal(badResult.errors.length, 4);        
+    });
+});
\ No newline at end of file
